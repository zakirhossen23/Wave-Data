import { useState, useEffect } from "react";
import ReactDOM from 'react-dom';
import React from 'react';
import Select from 'react-select';
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { PlusSmIcon, ChevronRightIcon, PencilIcon, TrashIcon, DocumentDuplicateIcon } from "@heroicons/react/solid";
import { PieChart, Pie, Tooltip } from 'recharts';
import axios from 'axios';
import G6 from '@antv/g6';
import UpdateSurveyModal from '../components/modal/UpdateSurvey'
function SurveyDetails() {
   var Thisstate = {
      sectionsloaded: false,
      data: []
   }
   const params = useParams();
   const navigate = useNavigate();
   let location = useLocation();
   const [tabIndex, setTabIndex] = useState(0);

   const [TRIAL_DATA, setTRIAL_DATA] = useState({})
   const [SURVEY_DATA, setSURVEY_DATA] = useState({})
   const [UpdatemodalShow, setModalShow] = useState(false);

   const [sectionsdata, setsectionsdata] = useState([
      {
         category: "",
         id: "",
         surveyID: 0
      },
   ])
   const [sectionsQuestionsdata, setsectionsQuestionsdata] = useState([
      {
         id: "",
         sectionid: "",
         questiontype: "",
         surveyid: "",
         question: "",
         questiontype2: ""
      },
   ])

   const [LimitedAnswerdata, setLimitedAnswerdata] = useState([
      {
         id: "",
         questionid: "",
         answer: "",
      },
   ])
   const TABS = [
      {
         id: 'questions',
         title: 'Questions',
      },
      {
         id: 'responses',
         title: 'Responses',
      },
   ];

   const dataCategory = [
      {
         value: "Emotional health activities",
         text: 'Emotional health activities',
         icon: <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_476_15862)">
               <path d="M6.51126 22.0638L6.44933 21.4817L5.88408 21.6338C5.68512 21.6874 5.47117 21.7151 5.25 21.7151C3.86937 21.7151 2.75 20.5939 2.75 19.2151C2.75 18.925 2.79986 18.6436 2.88999 18.3871L3.05197 17.9263L2.59507 17.7536C1.37016 17.2906 0.5 16.1043 0.5 14.7151C0.5 13.4199 1.25935 12.2983 2.35927 11.778L2.92772 11.5091L2.53765 11.0159C2.20335 10.5932 2 10.0133 2 9.46509C2 8.26684 2.84265 7.26556 3.96975 7.01918L4.48992 6.90547L4.34376 6.39347C4.28299 6.18057 4.25 5.95022 4.25 5.71509C4.25 4.54643 5.0544 3.5634 6.1364 3.29036L6.47421 3.20511L6.51123 2.85869C6.62492 1.79497 7.52796 0.965088 8.625 0.965088C9.79747 0.965088 10.75 1.91656 10.75 3.09009V21.8401C10.75 23.0124 9.7973 23.9651 8.625 23.9651C7.52914 23.9651 6.62517 23.1346 6.51126 22.0638ZM17.4888 2.85869L17.5258 3.20511L17.8636 3.29036C18.9456 3.5634 19.75 4.54643 19.75 5.71509C19.75 5.95255 19.7183 6.18183 19.6574 6.39105L19.5079 6.90482L20.0307 7.01916C21.1569 7.26553 22 8.26687 22 9.46509C22 10.0144 21.7984 10.5931 21.4623 11.0141L21.068 11.5082L21.6396 11.7781C22.7411 12.2984 23.5 13.4199 23.5 14.7151C23.5 16.1045 22.6311 17.2906 21.4047 17.7536L20.9487 17.9257L21.1091 18.3859C21.1992 18.6444 21.25 18.9264 21.25 19.2151C21.25 20.5936 20.1285 21.7151 18.75 21.7151C18.5288 21.7151 18.3149 21.6874 18.1159 21.6338L17.5507 21.4817L17.4887 22.0638C17.3748 23.1346 16.4709 23.9651 15.375 23.9651C14.2027 23.9651 13.25 23.0124 13.25 21.8401V3.09009C13.25 1.91656 14.2025 0.965088 15.375 0.965088C16.472 0.965088 17.3751 1.79497 17.4888 2.85869Z" fill="#EB71AC" stroke="#EB71AC" />
            </g>
            <defs>
               <clipPath id="clip0_476_15862">
                  <rect width="24" height="24" fill="white" transform="translate(0 0.465088)" />
               </clipPath>
            </defs>
         </svg>

      }
      , {
         value: "Limitations of activities",
         text: 'Limitations of activities',
         icon: <svg width="24" height="25"  viewBox="0 0 68 68" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M46.117 60.1053C46.2545 58.7663 43.373 60.0894 43.4085 60.5526L43.584 63.0993H45.9674L46.117 60.1053Z" fill="white" />
            <path d="M45.9677 63.5074H43.5843C43.481 63.5075 43.3815 63.4683 43.3059 63.3978C43.2304 63.3273 43.1844 63.2307 43.1772 63.1276L43.0016 60.5812C42.9787 60.2834 43.2019 60.0028 43.7032 59.7016C44.2584 59.369 45.4829 58.8523 46.1466 59.2732C46.2866 59.3647 46.3968 59.495 46.4639 59.6482C46.531 59.8015 46.5519 59.9709 46.5241 60.1358L46.3751 63.1198C46.3698 63.2243 46.3247 63.3228 46.2488 63.395C46.173 63.4672 46.0723 63.5074 45.9677 63.5074ZM43.9651 62.6914H45.5795L45.7097 60.0853C45.71 60.0781 45.7103 60.0711 45.7113 60.0641C45.7179 60.0287 45.7162 59.9924 45.7063 59.9578C45.58 59.9184 45.4451 59.9149 45.3168 59.9476C44.7714 60.0465 44.2583 60.277 43.8221 60.6189L43.9651 62.6914ZM43.8155 60.5216L43.8159 60.5263L43.8155 60.5216Z" fill="black" />
            <path d="M22.9194 48.2528L17.8874 47.0957L16.813 49.9462L19.62 50.654C21.7913 51.2584 23.8179 48.4001 22.9194 48.2528Z" fill="white" />
            <path d="M20.2288 51.1452C19.9862 51.1454 19.7447 51.1125 19.511 51.0473L16.7136 50.3417C16.6579 50.3277 16.6058 50.302 16.5607 50.2665C16.5155 50.2309 16.4784 50.1862 16.4518 50.1353C16.4252 50.0844 16.4096 50.0284 16.406 49.9711C16.4025 49.9137 16.4112 49.8563 16.4314 49.8025L17.5058 46.952C17.5406 46.8596 17.6078 46.783 17.6947 46.7363C17.7817 46.6896 17.8827 46.676 17.9789 46.698L23.0006 47.8528C23.1163 47.8707 23.2249 47.9202 23.3144 47.9957C23.4039 48.0713 23.4709 48.1701 23.5079 48.2812C23.7161 48.9 23.0235 49.6956 22.8063 49.9251C22.4782 50.2882 22.0816 50.5829 21.6393 50.7922C21.197 51.0016 20.7176 51.1216 20.2288 51.1452ZM17.3561 49.6624L19.7201 50.2588C20.1013 50.3389 20.4961 50.3274 20.872 50.2252C21.2479 50.1231 21.5942 49.9332 21.8825 49.6711C22.2438 49.3989 22.5288 49.038 22.7099 48.6235L18.1435 47.5733L17.3561 49.6624Z" fill="black" />
            <path d="M35.391 33.9748L30.0695 33.2803L29.5859 45.607L28.8356 47.4141C28.4357 48.3615 27.9632 48.9905 27.0648 48.8434L20.9643 47.8091L19.6201 50.654L27.6101 52.9918C29.7811 53.5961 31.1947 52.4051 32.2221 50.3994L34.1495 46.8642L35.6229 41.5725L35.391 33.9748Z" fill="#A2D5B0" />
            <path d="M28.7153 53.5621C28.3042 53.5586 27.8955 53.4991 27.5004 53.3853L19.5054 51.0461C19.4488 51.0296 19.3965 51.001 19.352 50.9623C19.3075 50.9236 19.2719 50.8757 19.2478 50.8219C19.2236 50.7681 19.2114 50.7097 19.2119 50.6508C19.2125 50.5918 19.2259 50.5337 19.2511 50.4804L20.5951 47.6352C20.6327 47.5544 20.6959 47.4883 20.7749 47.447C20.8539 47.4058 20.9443 47.3918 21.0321 47.4071L27.1332 48.442C27.6123 48.5194 27.9988 48.3484 28.46 47.256L29.1808 45.5188L29.6616 33.2652C29.6639 33.2086 29.6779 33.153 29.7029 33.1021C29.7278 33.0512 29.763 33.006 29.8063 32.9694C29.8498 32.9331 29.9003 32.9062 29.9546 32.8903C30.0089 32.8743 30.0659 32.8697 30.1221 32.8767L35.4433 33.5713C35.5393 33.5839 35.6278 33.6302 35.6928 33.702C35.7578 33.7738 35.7952 33.8663 35.7982 33.9632L36.0303 41.5607C36.0316 41.602 36.0267 41.6432 36.0157 41.6831L34.5421 46.975C34.5339 47.0048 34.5222 47.0335 34.5072 47.0606L32.5801 50.5947C31.5631 52.5803 30.2905 53.5621 28.7153 53.5621ZM20.1928 50.3968L27.7245 52.6006C29.4624 53.084 30.7766 52.3257 31.8589 50.2138L33.7686 46.71L35.2129 41.523L34.9935 34.3345L30.4596 33.7429L29.9936 45.6233C29.9918 45.6715 29.9813 45.7191 29.9627 45.7637L29.2126 47.5706C28.9712 48.1427 28.4078 49.4768 26.999 49.2464L21.2007 48.2629L20.1928 50.3968Z" fill="black" />
            <path d="M36.6616 15.2877L37.8183 12.9111L35.2962 12.1726L35.0024 14.4234L36.3257 17.6174L36.6616 15.2877Z" fill="white" />
            <path d="M36.3252 18.0255C36.2446 18.0254 36.1658 18.0014 36.0988 17.9566C36.0317 17.9117 35.9795 17.848 35.9487 17.7734L34.6258 14.5797C34.5984 14.5137 34.5889 14.4416 34.5982 14.3708L34.8921 12.1203C34.8997 12.0619 34.9198 12.0059 34.9511 11.956C34.9825 11.9061 35.0242 11.8636 35.0735 11.8314C35.1228 11.7992 35.1786 11.7781 35.2368 11.7695C35.2951 11.7609 35.3545 11.765 35.411 11.7816L37.9328 12.5194C37.9898 12.5361 38.0424 12.565 38.0871 12.6041C38.1318 12.6432 38.1673 12.6916 38.1914 12.7459C38.2154 12.8002 38.2273 12.859 38.2262 12.9184C38.2252 12.9778 38.2111 13.0362 38.1852 13.0895L37.0564 15.4091L36.7289 17.6759C36.7161 17.7643 36.6747 17.846 36.6109 17.9086C36.5472 17.9711 36.4646 18.0111 36.376 18.0222C36.3592 18.0244 36.3422 18.0255 36.3252 18.0255ZM35.4214 14.3684L36.1339 16.0888L36.2582 15.2295C36.2641 15.1878 36.2765 15.1472 36.295 15.1093L37.2402 13.1669L35.6399 12.6985L35.4214 14.3684Z" fill="black" />
            <path d="M26.7547 21.1471C26.0326 21.4761 25.4613 22.0656 25.1551 22.7977C24.8488 23.5298 24.8303 24.3505 25.1031 25.0957L27.7075 32.7457C27.7075 32.7457 27.916 34.0655 27.9292 34.7293C27.9424 35.393 28.4213 36.354 29.9384 36.099C31.4554 35.844 30.8685 35.2251 30.6915 34.5442C30.5145 33.8634 30.7344 34.1348 30.7344 34.1348C30.4669 33.5272 29.8102 32.952 29.7065 32.3615L27.3932 24.0142L33.4578 21.1672L33.9225 16.9382L26.7547 21.1471Z" fill="white" />
            <path d="M29.4685 36.5488C28.9983 36.5667 28.5371 36.4162 28.1679 36.1245C27.9681 35.9523 27.8071 35.7397 27.6956 35.5006C27.5841 35.2616 27.5246 35.0016 27.5211 34.7379C27.5098 34.1671 27.3418 33.0528 27.3096 32.8437L24.7168 25.2272C24.4098 24.3915 24.4287 23.4708 24.7699 22.6484C25.1111 21.826 25.7494 21.1622 26.5579 20.7893L33.7158 16.5861C33.7811 16.5478 33.8557 16.5285 33.9313 16.5301C34.0069 16.5318 34.0806 16.5545 34.1441 16.5956C34.2076 16.6367 34.2584 16.6947 34.2908 16.763C34.3233 16.8314 34.3361 16.9074 34.3278 16.9825L33.863 21.2116C33.8555 21.2811 33.8302 21.3475 33.7895 21.4044C33.7489 21.4612 33.6942 21.5067 33.6309 21.5363L27.8781 24.2371L30.0994 32.253C30.2001 32.5782 30.3662 32.8795 30.5875 33.1382C30.79 33.3964 30.9644 33.6754 31.1078 33.9706C31.136 34.0348 31.1473 34.1053 31.1403 34.1751C31.1334 34.245 31.1086 34.3119 31.0683 34.3693C31.0736 34.3912 31.0796 34.4155 31.0862 34.4417C31.1169 34.5503 31.153 34.6572 31.1945 34.7621C31.2875 34.9307 31.3406 35.1183 31.3498 35.3106C31.359 35.5029 31.3241 35.6948 31.2476 35.8714C31.0617 36.1942 30.6788 36.3882 30.0061 36.5017C29.8285 36.5322 29.6487 36.5479 29.4685 36.5488ZM33.4279 17.7014L26.9611 21.4988L26.9402 21.5101C26.3025 21.7935 25.7974 22.31 25.5282 22.9538C25.259 23.5976 25.2461 24.3199 25.4922 24.9729L28.0937 32.6145C28.1013 32.6367 28.1069 32.6594 28.1106 32.6825C28.1192 32.7376 28.3234 34.0378 28.3374 34.7215C28.339 34.868 28.3711 35.0126 28.4316 35.146C28.492 35.2795 28.5796 35.3989 28.6887 35.4967C28.8596 35.6134 29.0537 35.6918 29.2577 35.7264C29.4618 35.761 29.6709 35.7511 29.8707 35.6973C30.4571 35.5986 30.5401 35.4655 30.5407 35.4642C30.5299 35.3201 30.4925 35.1793 30.4305 35.0488C30.379 34.9175 30.3343 34.7835 30.2967 34.6476C30.2327 34.4546 30.2085 34.2506 30.2253 34.048C30.139 33.9092 30.0349 33.7664 29.9278 33.6186C29.634 33.2751 29.4211 32.87 29.3046 32.4333L27 24.1237C26.9743 24.0309 26.9823 23.932 27.0225 23.8445C27.0627 23.757 27.1326 23.6865 27.2197 23.6456L33.0771 20.8957L33.4279 17.7014Z" fill="black" />
            <path d="M37.9018 34.3024L30.0698 33.2803L31.6202 21.3977C32.1724 17.1668 33.151 15.2804 34.8774 14.6816C34.8774 14.6816 40.0624 17.7469 39.6434 21.3212C39.5635 22.0028 38.2442 23.5618 38.1491 24.3007C37.7996 27.6226 37.7169 30.9672 37.9018 34.3024Z" fill="#94AF48" />
            <path d="M37.9016 34.7104C37.8839 34.7103 37.8663 34.7091 37.8488 34.7067L30.0172 33.6847C29.9641 33.6778 29.9128 33.6605 29.8664 33.6338C29.82 33.6071 29.7793 33.5715 29.7466 33.529C29.714 33.4865 29.69 33.4381 29.6761 33.3863C29.6622 33.3346 29.6586 33.2806 29.6656 33.2275L31.216 21.3451C31.7814 17.0114 32.8034 14.9695 34.7435 14.2965C34.7995 14.2772 34.859 14.2703 34.9179 14.2762C34.9768 14.2821 35.0337 14.3006 35.0848 14.3305C35.3059 14.4612 40.4933 17.5741 40.0484 21.3685C39.8891 21.9497 39.623 22.4962 39.2638 22.9801C38.9633 23.4018 38.7243 23.864 38.5539 24.353C38.2093 27.6493 38.1273 30.9678 38.3085 34.2771C38.312 34.3327 38.304 34.3884 38.2851 34.4408C38.2662 34.4932 38.2368 34.5412 38.1986 34.5818C38.1605 34.6224 38.1144 34.6547 38.0633 34.6768C38.0122 34.699 37.9571 34.7104 37.9014 34.7104H37.9016ZM30.5272 32.9288L37.4693 33.8346C37.3125 30.637 37.4045 27.4321 37.7446 24.2488C37.9149 23.6373 38.1948 23.0617 38.5706 22.5502C38.8502 22.157 39.0749 21.7276 39.2384 21.2738C39.5817 18.3443 35.69 15.6827 34.834 15.1356C33.3452 15.7647 32.5247 17.6218 32.025 21.4508L30.5272 32.9288Z" fill="black" />
            <path d="M36.2327 12.6615C36.9631 13.4225 37.8152 14.0566 38.754 14.5377C39.9421 15.025 40.4466 14.3274 40.9618 11.7781C41.4771 9.22885 41.8038 7.23414 40.9302 6.01803C40.0565 4.80191 36.5418 4.22602 35.0595 6.12907C33.5773 8.03212 35.2967 11.8251 36.2327 12.6615Z" fill="white" />
            <path d="M39.3788 15.0903C39.11 15.0831 38.8452 15.0236 38.5992 14.9153C37.6107 14.4174 36.7144 13.7545 35.9489 12.955C34.9243 12.0217 33.0722 8.01636 34.738 5.87844C35.1497 5.40618 35.6649 5.03526 36.2433 4.79454C36.8218 4.55383 37.448 4.4498 38.0732 4.49056C39.4452 4.51708 40.7264 5.03504 41.2617 5.77984C42.2243 7.12019 41.9105 9.14496 41.3616 11.859C40.9748 13.7742 40.5983 14.6103 39.9734 14.9446C39.7905 15.0422 39.5861 15.0923 39.3788 15.0903ZM37.9644 5.30568C37.4806 5.27738 36.9966 5.35938 36.5491 5.54551C36.1016 5.73163 35.7023 6.01701 35.3812 6.38008C34.0704 8.06315 35.7059 11.6441 36.5044 12.3576C36.5123 12.3644 36.5197 12.3716 36.5267 12.3792C37.2181 13.099 38.0226 13.7008 38.9084 14.1608C39.3151 14.3278 39.4907 14.2776 39.5884 14.2255C40.0479 13.9798 40.35 12.7456 40.5619 11.6981C41.0692 9.18793 41.3687 7.32854 40.5987 6.25639C40.2608 5.93522 39.8616 5.68557 39.4249 5.52241C38.9882 5.35925 38.5231 5.28592 38.0574 5.30683C38.0263 5.30602 37.9954 5.30568 37.9644 5.30568Z" fill="black" />
            <path d="M35.96 4.01583C35.96 4.01583 36.1564 3.10354 34.7207 2.1835C34.2766 1.91543 33.7776 1.75125 33.2611 1.70324C32.7445 1.65524 32.2238 1.72464 31.7379 1.90627C31.252 2.08789 30.8134 2.37704 30.455 2.75208C30.0966 3.12712 29.8277 3.57834 29.6683 4.072C28.8498 6.61071 30.2927 9.41578 29.2236 10.158C29.2236 10.158 30.4658 11.2403 31.1956 8.85491C31.9255 6.46954 33.5144 3.22839 34.6116 4.09621C34.6113 4.09641 35.5967 4.75057 35.96 4.01583Z" fill="#6B6D62" />
            <path d="M29.8819 10.8104C29.543 10.8043 29.2162 10.6828 28.9556 10.4661C28.9087 10.4253 28.8718 10.3744 28.8476 10.3172C28.8235 10.26 28.8126 10.198 28.816 10.136C28.8194 10.074 28.8369 10.0136 28.8672 9.95942C28.8975 9.90521 28.9397 9.85862 28.9907 9.8232C29.3314 9.58683 29.2381 8.75771 29.1305 7.79782C28.9052 6.51812 28.9562 5.20501 29.2801 3.94664C29.4462 3.39237 29.7399 2.88475 30.1376 2.46454C30.5354 2.04433 31.0262 1.72325 31.5705 1.52707C32.1207 1.32794 32.7081 1.25273 33.2907 1.30681C33.8733 1.36088 34.4368 1.54289 34.9409 1.83987C36.5964 2.90067 36.3697 4.0532 36.3591 4.10168C36.352 4.13462 36.3409 4.16659 36.3261 4.19688C36.2657 4.32771 36.1775 4.44376 36.0676 4.53691C35.9576 4.63005 35.8286 4.69805 35.6897 4.73612C35.2329 4.80381 34.7673 4.69699 34.3858 4.43692C34.3553 4.40359 34.3157 4.37996 34.2719 4.36897C34.2281 4.35798 34.182 4.36012 34.1394 4.37511C33.4402 4.59271 32.2946 6.65651 31.5858 8.97477C31.275 9.99143 30.8154 10.5932 30.2198 10.7638C30.1099 10.7951 29.9962 10.8108 29.8819 10.8104ZM29.8719 9.9949C29.9151 9.99454 29.9581 9.98862 29.9998 9.97729C30.1748 9.92513 30.5121 9.69407 30.8053 8.73581C31.3296 7.02119 32.5707 4.009 33.8962 3.59563C34.0596 3.54088 34.2343 3.52873 34.4037 3.56035C34.5731 3.59197 34.7317 3.6663 34.8643 3.7763C35.0461 3.89584 35.2606 3.95571 35.478 3.94759C35.5122 3.93937 35.5421 3.9185 35.5616 3.88918C35.56 3.71653 35.474 3.1507 34.5005 2.52714C34.1013 2.29831 33.6572 2.15903 33.1989 2.11896C32.7406 2.07888 32.279 2.13897 31.8462 2.29506C31.4182 2.44697 31.0327 2.69876 30.7215 3.02952C30.4103 3.36029 30.1824 3.7605 30.0569 4.19695C29.7697 5.34545 29.7303 6.54193 29.9413 7.70684C30.1075 8.46355 30.0837 9.24965 29.8719 9.9949Z" fill="black" />
            <path d="M39.9155 8.65917C40.9559 8.98366 41.7651 8.10599 42.0184 7.05131C42.1724 6.50621 42.1068 5.92248 41.8357 5.42514C41.5646 4.92779 41.1096 4.55639 40.568 4.39047C39.2668 3.91705 37.2645 2.13919 34.6112 4.0963C31.9578 6.05341 32.8179 11.0444 35.3193 12.2087C35.1933 11.6373 35.2154 11.0431 35.3834 10.4827C35.3834 10.4827 34.7144 9.18895 35.3042 8.28313C35.8939 7.3773 36.5001 8.22233 36.3709 8.60633C36.3711 8.6066 37.014 7.75429 39.9155 8.65917Z" fill="#6B6D62" />
            <path d="M35.3192 12.6167C35.2599 12.6167 35.2013 12.6038 35.1476 12.5788C33.8018 11.9522 32.8071 10.3008 32.6135 8.37128C32.481 7.5175 32.5733 6.64393 32.8812 5.83667C33.1892 5.02941 33.7021 4.31632 34.3696 3.76768C36.7214 2.0328 38.6552 3.00608 39.9351 3.64943C40.1861 3.78233 40.444 3.90159 40.7077 4.0067C41.3456 4.20405 41.8812 4.64282 42.2001 5.22943C42.5191 5.81604 42.5962 6.50406 42.4151 7.14674C42.344 7.50559 42.2008 7.84629 41.9943 8.14825C41.7877 8.4502 41.5221 8.70714 41.2135 8.90352C41.0003 9.02605 40.7638 9.1023 40.5192 9.1273C40.2746 9.1523 40.0275 9.1255 39.794 9.04863C37.312 8.27431 36.6869 8.86666 36.6802 8.87265C36.6226 8.9485 36.5394 9.00092 36.4461 9.02021C36.3528 9.0395 36.2556 9.02435 36.1726 8.97757C36.0874 8.92944 36.0219 8.85287 35.9874 8.76127C35.953 8.66967 35.9519 8.56888 35.9843 8.47654C35.9769 8.43803 35.9619 8.4014 35.94 8.36883C35.9182 8.33626 35.89 8.30842 35.8572 8.28696C35.8585 8.2873 35.7752 8.30736 35.6464 8.50572C35.1955 9.19871 35.741 10.2854 35.7467 10.2964C35.7727 10.3475 35.7878 10.4035 35.7908 10.4608C35.7939 10.5181 35.785 10.5754 35.7646 10.6291C35.6255 11.1134 35.6092 11.6247 35.717 12.1169C35.7308 12.1768 35.7309 12.239 35.7174 12.2989C35.7038 12.3588 35.6769 12.4148 35.6386 12.4629C35.6003 12.5109 35.5517 12.5497 35.4964 12.5763C35.441 12.6029 35.3804 12.6167 35.3189 12.6167H35.3192ZM37.094 3.60795C36.2776 3.62619 35.49 3.91331 34.8534 4.42477C34.3012 4.8903 33.8793 5.49124 33.6289 6.16876C33.3786 6.84629 33.3085 7.57719 33.4254 8.28995C33.5117 9.45583 34.0088 10.5533 34.8283 11.3871C34.8259 11.0893 34.8653 10.7927 34.9452 10.5059C34.7577 10.1251 34.6616 9.70573 34.6646 9.28123C34.6675 8.85672 34.7694 8.43875 34.9621 8.06052C35.4738 7.27431 36.0518 7.47389 36.2172 7.55385C36.4007 7.64769 36.5519 7.79435 36.6512 7.97491C37.2126 7.78294 38.2359 7.70794 40.0369 8.26942C40.1638 8.31219 40.2984 8.32755 40.4317 8.31449C40.565 8.30143 40.694 8.26025 40.8102 8.19367C41.0204 8.05108 41.2002 7.86832 41.3394 7.65591C41.4786 7.44351 41.5744 7.20566 41.6213 6.95607C41.751 6.50853 41.6983 6.02787 41.4748 5.61904C41.2513 5.21021 40.8751 4.9064 40.4284 4.77395C40.1345 4.65839 39.8473 4.52649 39.5681 4.37887C38.8162 3.92937 37.9682 3.66513 37.094 3.60795Z" fill="black" />
            <path d="M54.8727 66.7081H5.02323C4.91503 66.7081 4.81125 66.6651 4.73473 66.5886C4.65822 66.5121 4.61523 66.4083 4.61523 66.3001C4.61523 66.1919 4.65822 66.0881 4.73473 66.0116C4.81125 65.9351 4.91503 65.8921 5.02323 65.8921H54.8727C54.981 65.8921 55.0847 65.9351 55.1612 66.0116C55.2378 66.0881 55.2807 66.1919 55.2807 66.3001C55.2807 66.4083 55.2378 66.5121 55.1612 66.5886C55.0847 66.6651 54.981 66.7081 54.8727 66.7081Z" fill="black" />
            <path d="M62.9767 66.7081H59.6946C59.5864 66.7081 59.4826 66.6651 59.4061 66.5886C59.3296 66.5121 59.2866 66.4083 59.2866 66.3001C59.2866 66.1919 59.3296 66.0881 59.4061 66.0116C59.4826 65.9351 59.5864 65.8921 59.6946 65.8921H62.9767C63.0849 65.8921 63.1887 65.9351 63.2652 66.0116C63.3417 66.0881 63.3847 66.1919 63.3847 66.3001C63.3847 66.4083 63.3417 66.5121 63.2652 66.5886C63.1887 66.6651 63.0849 66.7081 62.9767 66.7081Z" fill="black" />
            <path d="M15.2479 46.6633C15.1034 46.6396 14.9553 46.669 14.8308 46.746C14.7064 46.8231 14.614 46.9426 14.5708 47.0824L13.1739 52.4398C13.1473 52.5261 13.1403 52.6173 13.1534 52.7067C13.1666 52.796 13.1995 52.8814 13.2498 52.9564C13.3001 53.0314 13.3665 53.0942 13.4442 53.1403C13.5219 53.1864 13.6089 53.2146 13.6989 53.2227C14.5856 53.3057 15.7081 53.1234 16.8133 50.2323L17.8877 47.0957L15.2479 46.6633Z" fill="#6B6D62" />
            <path d="M13.9865 53.6453C13.8763 53.6453 13.7677 53.6393 13.6601 53.629C13.5098 53.6151 13.3644 53.5679 13.2347 53.4907C13.1049 53.4135 12.994 53.3083 12.9101 53.1828C12.8261 53.0573 12.7712 52.9147 12.7494 52.7653C12.7276 52.6159 12.7394 52.4635 12.784 52.3193L14.1758 46.9798C14.2471 46.743 14.4014 46.5399 14.6104 46.4077C14.8194 46.2756 15.0691 46.2233 15.3136 46.2605L17.9532 46.6931C18.0117 46.7028 18.0674 46.7251 18.1165 46.7585C18.1655 46.7919 18.2067 46.8355 18.2371 46.8864C18.2676 46.9373 18.2866 46.9943 18.2928 47.0533C18.2991 47.1122 18.2924 47.1719 18.2733 47.228L17.1989 50.3647C16.1438 53.1259 15.0025 53.6453 13.9865 53.6453ZM15.1499 47.0634C15.1076 47.0635 15.0663 47.0771 15.0323 47.1023C14.9982 47.1274 14.973 47.1628 14.9604 47.2032L13.5685 52.5429C13.5571 52.5732 13.5529 52.6057 13.5562 52.6378C13.5595 52.67 13.5704 52.701 13.5878 52.7282C13.6042 52.7532 13.6262 52.7742 13.652 52.7895C13.6777 52.8049 13.7066 52.8141 13.7365 52.8166C14.2934 52.8698 15.3312 52.9667 16.4319 50.0867L17.3451 47.4201L15.1815 47.0659C15.1711 47.064 15.1605 47.0632 15.1499 47.0633V47.0634Z" fill="black" />
            <path d="M44.4259 44.502L42.0904 41.7888L37.2778 34.221C35.3915 33.9748 31.373 33.5937 30.0702 33.2803C29.9977 35.6017 27.6222 37.2679 32.5968 40.8253L39.0165 45.4804L42.0132 47.8672C42.3647 48.1709 42.5819 48.6012 42.6173 49.0644L43.4089 60.5528H46.1174L46.4234 48.5255C46.5605 47.1864 45.2308 45.5809 44.4259 44.502Z" fill="#A2D5B0" />
            <path d="M46.1169 60.9608H43.4085C43.3051 60.9608 43.2056 60.9216 43.13 60.851C43.0544 60.7804 43.0085 60.6838 43.0014 60.5806L42.2099 49.0924C42.1966 48.9166 42.1488 48.7452 42.0692 48.588C41.9896 48.4307 41.8798 48.2907 41.7461 48.1759L38.7618 45.7996L32.3568 41.1558C28.3429 38.2857 28.8838 36.4128 29.3613 34.7602C29.5237 34.2773 29.6247 33.7759 29.6621 33.2678C29.6639 33.2071 29.6793 33.1477 29.707 33.0938C29.7347 33.0399 29.7741 32.9928 29.8223 32.956C29.8705 32.9192 29.9263 32.8936 29.9856 32.8811C30.0449 32.8686 30.1063 32.8694 30.1653 32.8836C31.0438 33.0951 33.3062 33.3511 35.1242 33.5568C35.9674 33.6524 36.7494 33.7404 37.3305 33.8168C37.3897 33.8244 37.4465 33.845 37.4969 33.8771C37.5473 33.9092 37.59 33.952 37.622 34.0024L42.4345 41.5701L44.7348 44.2357C44.7411 44.243 44.747 44.2503 44.7527 44.2579L44.9825 44.563C45.8212 45.6714 46.97 47.1904 46.8286 48.567L46.5248 60.563C46.5221 60.6694 46.478 60.7705 46.4018 60.8449C46.3256 60.9192 46.2234 60.9608 46.1169 60.9608ZM43.7893 60.1448H45.7191L46.015 48.5154C46.1255 47.4267 45.0886 46.056 44.3316 45.0557L44.1078 44.7582L41.7809 42.0551L37.0362 34.6015C36.4833 34.5318 35.7821 34.4524 35.0324 34.3674C33.3676 34.1792 31.5119 33.9693 30.4347 33.7721C30.3664 34.1832 30.2697 34.589 30.1452 34.9867C29.6846 36.5808 29.2872 37.9577 32.8336 40.4934L39.2555 45.1501L42.267 47.5481C42.4851 47.7333 42.6642 47.96 42.7941 48.2149C42.924 48.4698 43.002 48.748 43.0236 49.0333L43.7893 60.1448Z" fill="black" />
            <path d="M48.2939 63.9849C46.46 63.2893 45.9674 63.0996 45.9674 63.0996H43.584L43.763 65.4356C43.7802 65.6602 43.8815 65.8701 44.0468 66.0232C44.2121 66.1763 44.4291 66.2613 44.6544 66.2613H49.3048C49.4789 66.2619 49.6462 66.1942 49.7711 66.0729C49.896 65.9516 49.9684 65.7862 49.9729 65.6122C49.9833 65.0938 49.3607 64.3893 48.2939 63.9849Z" fill="#6B6D62" />
            <path d="M49.3048 66.6695H44.6544C44.3266 66.6681 44.0114 66.5437 43.771 66.3209C43.5306 66.0982 43.3827 65.7932 43.3564 65.4666L43.1775 63.1307C43.1732 63.0746 43.1805 63.0183 43.199 62.9652C43.2175 62.9121 43.2467 62.8634 43.2849 62.8222C43.3231 62.781 43.3694 62.748 43.4209 62.7255C43.4724 62.703 43.528 62.6914 43.5842 62.6914H45.9676C46.0177 62.6914 46.0675 62.7006 46.1143 62.7186C46.1156 62.7192 46.609 62.9095 48.4388 63.6034C49.5973 64.0425 50.3959 64.8721 50.3812 65.6201C50.3734 65.9006 50.2566 66.167 50.0556 66.3629C49.8547 66.5588 49.5854 66.6687 49.3048 66.6695ZM44.0248 63.5075L44.1699 65.4047C44.1798 65.5266 44.235 65.6403 44.3247 65.7234C44.4144 65.8065 44.5321 65.8529 44.6544 65.8535H49.3048C49.3721 65.8539 49.4369 65.8281 49.4855 65.7816C49.5341 65.735 49.5627 65.6714 49.5651 65.6041C49.5708 65.3239 49.1248 64.7362 48.1494 64.3665C46.6942 63.8147 46.0828 63.5806 45.8918 63.5075L44.0248 63.5075Z" fill="black" />
            <path d="M32.0501 38.6245C31.2713 38.1232 30.6928 37.3648 30.4151 36.4812C30.3348 36.4379 30.2519 36.3941 30.1792 36.3521C30.2596 36.9392 30.465 37.5023 30.7815 38.0035C31.0979 38.5046 31.5181 38.932 32.0137 39.257L40.6275 45.808L32.0501 38.6245Z" fill="white" />
            <path d="M45.6149 29.7909C45.5194 29.791 45.427 29.7576 45.3537 29.6966C45.2803 29.6356 45.2306 29.5508 45.2133 29.457C45.196 29.3631 45.2121 29.2662 45.2588 29.183C45.3056 29.0998 45.38 29.0357 45.4691 29.0017L48.5331 27.8299C48.6342 27.7912 48.7465 27.7943 48.8453 27.8385C48.9441 27.8826 49.0214 27.9642 49.06 28.0653C49.0987 28.1664 49.0956 28.2787 49.0514 28.3775C49.0073 28.4764 48.9257 28.5536 48.8246 28.5922L45.7606 29.764C45.7141 29.7818 45.6647 29.7909 45.6149 29.7909Z" fill="black" />
            <path d="M43.2937 30.6789C43.1983 30.679 43.1058 30.6456 43.0324 30.5846C42.959 30.5236 42.9094 30.4388 42.892 30.3449C42.8747 30.2511 42.8908 30.1541 42.9376 30.0709C42.9844 29.9877 43.0588 29.9236 43.148 29.8896L43.6122 29.712C43.7133 29.6733 43.8256 29.6764 43.9244 29.7206C44.0232 29.7647 44.1005 29.8463 44.1391 29.9474C44.1778 30.0485 44.1747 30.1608 44.1305 30.2596C44.0864 30.3584 44.0048 30.4357 43.9037 30.4743L43.4395 30.6519C43.393 30.6697 43.3436 30.6789 43.2937 30.6789Z" fill="black" />
            <path d="M29.6945 55.8003C29.0709 55.7967 28.4508 55.7084 27.851 55.5377C27.7994 55.5234 27.7511 55.499 27.7089 55.466C27.6667 55.433 27.6314 55.392 27.605 55.3453C27.5787 55.2987 27.5618 55.2473 27.5553 55.1941C27.5488 55.1409 27.5528 55.087 27.5671 55.0353C27.5815 54.9837 27.6059 54.9354 27.6389 54.8932C27.6719 54.851 27.7129 54.8157 27.7595 54.7893C27.8062 54.763 27.8576 54.7461 27.9108 54.7396C27.9639 54.7331 28.0179 54.7371 28.0695 54.7514C29.8402 55.2439 32.0891 55.0679 33.0988 53.0956C33.1481 52.9993 33.2337 52.9265 33.3367 52.8933C33.4397 52.86 33.5516 52.8691 33.648 52.9184C33.7443 52.9677 33.8171 53.0532 33.8503 53.1562C33.8836 53.2592 33.8746 53.3712 33.8253 53.4675C33.4278 54.2072 32.8288 54.8191 32.0976 55.232C31.3664 55.6449 30.5331 55.842 29.6945 55.8003Z" fill="black" />
            <path d="M34.314 51.7683L34.9953 50.6538L34.314 51.7683Z" fill="white" />
            <path d="M34.3137 52.1764C34.2412 52.1764 34.1701 52.157 34.1075 52.1204C34.045 52.0837 33.9933 52.0311 33.9579 51.9678C33.9224 51.9046 33.9045 51.8331 33.9058 51.7606C33.9072 51.6881 33.9279 51.6173 33.9657 51.5555L34.6471 50.4412C34.6743 50.3941 34.7107 50.3529 34.7541 50.32C34.7975 50.2871 34.8471 50.2633 34.8998 50.2499C34.9526 50.2365 35.0075 50.2338 35.0613 50.2419C35.1151 50.25 35.1668 50.2688 35.2132 50.2972C35.2597 50.3256 35.3 50.3631 35.3317 50.4073C35.3635 50.4515 35.3861 50.5016 35.3982 50.5547C35.4103 50.6078 35.4116 50.6627 35.4021 50.7163C35.3927 50.7699 35.3726 50.8211 35.343 50.8668L34.6624 51.9811C34.6259 52.0408 34.5747 52.0902 34.5136 52.1243C34.4525 52.1585 34.3837 52.1765 34.3137 52.1764Z" fill="black" />
            <path d="M34.7875 21.5041L38.0776 28.2518C38.6978 29.4585 40.071 29.5292 41.3484 29.0723L47.653 26.33C48.3384 26.1275 49.0343 25.9618 49.7374 25.8336C50.3962 25.7513 51.302 25.1749 50.8903 23.6927C50.4786 22.2105 49.3087 22.2404 48.7838 22.7088C48.0393 23.3733 48.068 22.584 48.068 22.584C47.4916 22.9134 47.2055 23.74 46.6291 23.9043L40.3323 26.3995L37.8488 19.9406C37.8488 19.9406 37.0457 17.2473 35.5209 17.6602C33.3336 18.2528 34.7875 21.5041 34.7875 21.5041Z" fill="white" />
            <path d="M39.9663 29.7414C39.5052 29.7655 39.047 29.6552 38.6473 29.4239C38.2476 29.1926 37.9237 28.8503 37.7148 28.4385L34.4207 21.6831L34.4151 21.6708C34.3779 21.5871 33.509 19.6128 34.1331 18.296C34.2554 18.039 34.4341 17.8129 34.656 17.6346C34.8778 17.4564 35.137 17.3305 35.4143 17.2663C36.9198 16.8607 37.8996 18.6818 38.2399 19.824L40.5651 25.8686L46.4786 23.5255C46.7287 23.4052 46.9394 23.2164 47.0863 22.981C47.296 22.6835 47.5605 22.4286 47.8655 22.2299C47.9179 22.2001 47.9762 22.1822 48.0363 22.1775C48.0964 22.1729 48.1567 22.1816 48.2131 22.203C48.2694 22.2244 48.3203 22.258 48.3621 22.3014C48.4039 22.3448 48.4356 22.3969 48.4549 22.454C48.4724 22.4394 48.4917 22.4231 48.5123 22.4046C48.7133 22.2314 48.9542 22.1108 49.2133 22.0539C49.4725 21.9969 49.7417 22.0052 49.9968 22.0782C50.3255 22.1923 50.618 22.3918 50.8441 22.6564C51.0702 22.9209 51.2218 23.2408 51.2834 23.5833C51.3934 23.8887 51.434 24.2149 51.4023 24.538C51.3705 24.8611 51.2672 25.1731 51.0998 25.4513C50.9493 25.6679 50.7546 25.8501 50.5284 25.9858C50.3023 26.1215 50.0499 26.2076 49.788 26.2385C49.1062 26.364 48.4315 26.5252 47.7666 26.7213L41.5112 29.4466C41.0169 29.6325 40.4943 29.7322 39.9663 29.7414ZM35.1575 21.3315L38.4446 28.0727C39.0721 29.2949 40.5885 28.9105 41.2111 28.688L47.4904 25.9557C48.2118 25.7375 48.9453 25.5617 49.6872 25.4291C49.8326 25.412 49.9729 25.3649 50.0992 25.2909C50.2255 25.2168 50.3351 25.1173 50.421 24.9988C50.5194 24.8166 50.5772 24.6153 50.5904 24.4087C50.6036 24.2021 50.5718 23.9951 50.4973 23.802C50.4664 23.5958 50.383 23.4011 50.2551 23.2364C50.1273 23.0717 49.9593 22.9426 49.7672 22.8615C49.6453 22.8267 49.5166 22.8223 49.3925 22.8487C49.2685 22.8752 49.1528 22.9317 49.0557 23.0132C48.9129 23.1407 48.4766 23.5282 48.047 23.3264C48.0024 23.3055 47.9605 23.2792 47.9225 23.248C47.8567 23.3237 47.7909 23.406 47.7242 23.4897C47.4892 23.8551 47.1454 24.1374 46.7414 24.2969L40.4829 26.7789C40.4328 26.7988 40.3792 26.8085 40.3253 26.8075C40.2713 26.8066 40.2181 26.795 40.1687 26.7733C40.1193 26.7517 40.0747 26.7204 40.0375 26.6814C40.0002 26.6424 39.9711 26.5964 39.9517 26.5461L37.4679 20.0871C37.451 20.0344 36.7288 17.7572 35.6275 18.0539C35.4648 18.0884 35.312 18.1595 35.1809 18.2619C35.0498 18.3642 34.9437 18.4951 34.8708 18.6446C34.4874 19.4515 34.9451 20.8516 35.1575 21.3315Z" fill="black" />
            <path d="M34.7819 16.1133C34.7819 16.1133 32.5044 15.5324 31.9388 21.7431C31.3732 27.9538 31.0571 32.7583 31.0571 32.7583C31.0571 32.7583 32.5243 21.9714 32.8143 19.5879C32.8863 18.9047 33.0982 18.2437 33.4367 17.6459C33.7752 17.0482 34.2331 16.5265 34.7819 16.1133Z" fill="white" />
            <path d="M30.2087 5.69545C30.1766 5.22813 30.2507 4.75961 30.4253 4.32496C30.5999 3.8903 30.8706 3.50077 31.217 3.18549C31.5634 2.87021 31.9767 2.63736 32.4258 2.50436C32.875 2.37135 33.3484 2.34164 33.8106 2.41745C33.8707 2.42894 33.9249 2.44261 33.9806 2.45573C33.7996 2.38548 33.6125 2.33181 33.4217 2.29539C32.9948 2.22538 32.5576 2.25282 32.1428 2.37566C31.728 2.4985 31.3463 2.71356 31.0264 3.00474C30.7064 3.29592 30.4564 3.65569 30.2952 4.05713C30.1339 4.45857 30.0655 4.89128 30.0951 5.32288C30.126 5.71972 30.2071 6.11104 30.3365 6.48745C30.2716 6.22754 30.2288 5.96259 30.2087 5.69545Z" fill="white" />
         </svg>


      }
   ]

   function sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
   }
   async function addSection(e) {
      var addSectionBTN = e.currentTarget;
      addSectionBTN.classList.remove("hover:bg-gray-600")
      addSectionBTN.classList.remove("bg-black")
      addSectionBTN.classList.add("bg-gray-400")
      addSectionBTN.classList.add("cursor-default")
      addSectionBTN.disabled = true;
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/CreateSection?SurveyidTXT=${(params.id)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => { return e.json() }).then(e2 => {
         setsectionsdata(prevState => [...prevState, {
            id: e2.results[0].ID,
            category: ""
         }]);
         addSectionBTN.classList.add("hover:bg-gray-600")
         addSectionBTN.classList.add("bg-black")
         addSectionBTN.classList.remove("bg-gray-400")
         addSectionBTN.classList.remove("cursor-default")
         addSectionBTN.disabled = false;
      })


   };

   async function addQuestion(e) {
      var addQuestionBTN = e.currentTarget;
      let sectionsidTXT = e.currentTarget.getAttribute("sectionsid");
      addQuestionBTN.classList.remove("hover:bg-gray-600")
      addQuestionBTN.classList.remove("bg-black")
      addQuestionBTN.classList.add("bg-gray-400")
      addQuestionBTN.classList.add("cursor-default")
      addQuestionBTN.disabled = true;

      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/CreateQuestion?sectionidTXT=${encodeURIComponent(sectionsidTXT)}&surveyID=${encodeURIComponent(params.id)}&trialidTXT=${parseInt(location.state.trialID)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => { return e.json() }).then(e2 => {
         setsectionsQuestionsdata(prevState => [...prevState, {
            id: e2.results[0].ID,
            sectionid: sectionsidTXT,
            questiontype: "rating",
            surveyid: params.id,
            question: "",
            questiontype2: "1-5"
         }]);
         addQuestionBTN.classList.add("hover:bg-gray-600")
         addQuestionBTN.classList.add("bg-black")
         addQuestionBTN.classList.remove("bg-gray-400")
         addQuestionBTN.classList.remove("cursor-default")


         addQuestionBTN.disabled = false;
      })


   };

   async function LoadDataTrial() {
      setTRIAL_DATA({})
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/GetTrial?idTXT=${parseInt(location.state.trialID)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json();
      }).then(e => {
         setTRIAL_DATA(e.results[0]['(SV)'][0].attributes);
      })
   }
   async function LoadSurveyData() {
      setSURVEY_DATA({})
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/SelectSurveyByID?idTXT=${encodeURIComponent(params.id)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json();
      }).then(e => {
         console.log(e.results[0]['(SV)'])
         setSURVEY_DATA(e.results[0]['(SV)'][0].attributes);
      })
   }

   async function LoadDataSections() {
      setsectionsdata([])
      sleep(100)
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/LoadSection?surveyIDTXT=${encodeURIComponent(params.id)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json();
      }).then(e => {
         e.results[0].SV.forEach(async element => {
            setsectionsdata(prevState => [...prevState, element.attributes]);
         });
         Thisstate.sectionsloaded = true;
      })
   }
   async function LoadDataQuestions() {
      setsectionsQuestionsdata([])
      sleep(100)
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/LoadQuestionBySurveyID?surveyIDTXT=${encodeURIComponent(params.id)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json();
      }).then(e => {
         e.results[0].SV.forEach(async element => {
            setsectionsQuestionsdata(prevState => [...prevState, element.attributes]);
         });
         Thisstate.sectionsloaded = true;
      })
   }
   async function LoadDataLimitedAnswers() {
      setLimitedAnswerdata([])
      sleep(100)
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/LoadLimitedAnswers?surveyIDTXT=${parseInt(params.id)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json();
      }).then(e => {
         e.results[0].SV.forEach(async element => {
            setLimitedAnswerdata(prevState => [...prevState, element.attributes]);
         });
      })
   }


   async function AddLimitedAnswer(e, item) {
      var AddLimitedBTN = e.currentTarget;
      AddLimitedBTN.classList.remove("hover:bg-white")
      AddLimitedBTN.classList.add("bg-gray-300")
      AddLimitedBTN.classList.add("cursor-default")
      AddLimitedBTN.disabled = true;
      let questionidTXT = item.id;
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/CreateLimitedAnswer?questionidTXT=${encodeURIComponent(questionidTXT)}&surveyidTXT=${encodeURIComponent(params.id)}&sectionidTXT=${encodeURIComponent(item.sectionid)}&trialidTXT=${parseInt(location.state.trialID)}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => { return e.json() }).then(e2 => {
         setLimitedAnswerdata(prevState => [...prevState, {
            id: e2.results[0].ID,
            questionid: item.id,
            answer: ""
         }]);
         AddLimitedBTN.classList.add("hover:bg-white")
         AddLimitedBTN.classList.remove("bg-gray-300")
         AddLimitedBTN.classList.remove("cursor-default")
         AddLimitedBTN.disabled = false;
      })


   }

   async function updateSections() {
      var done = new Promise(async (resolve, reject) => {
         await sectionsdata.forEach(async (element) => {
            const textUpdate = `UpdateSection?idTXT=${encodeURIComponent(element.id)}&categoryTXT=${encodeURIComponent(element.category)}`
            var waitUpdate = new Promise(async (resolve2, reject) => {
               await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textUpdate}`, {
                  "headers": {
                     "accept-language": "en-US,en;q=0.9",
                     "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
                  },
                  "body": null,
                  "method": "GET"
               }).then(e => {
                  resolve2(e.json)
               })
            });
            await waitUpdate;
         });
         resolve(sectionsdata);

      })
      await done
   }
   async function updateQuestionType(idTXT, typeTXT) {
      const textUpdate = `UpdateQuestion?idTXT=${encodeURIComponent(idTXT)}&typeTXT=${encodeURIComponent(typeTXT)}&questionTXT=""&way=type&questiontype2TXT=${encodeURIComponent()}`
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textUpdate}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json;
      })
   }
   async function updateQuestionAnswerType(idTXT, typeAnserTXT) {
      const textUpdate = `UpdateQuestion?idTXT=${encodeURIComponent(idTXT)}&way=answertype&questiontype2TXT=${encodeURIComponent(typeAnserTXT)}`
      await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textUpdate}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json;
      })
   }


   function RatingAnswer({ item }) {
      return (<><div className="ml-4 bg-white" style={{ width: '48.7%' }} id={`AnswerType${item.id}`}>
         <select id="testID" defaultValue={item.questiontype2} onChange={(e) => {sectionsQuestionsdata.filter(es=>es.id == item.id)[0].questiontype2=e.target.value; updateQuestionAnswerType(item.id, e.target.value) }} className="h-10 px-1 rounded-md border border-gray-200 outline-none " style={{ "width": "100%" }}>
            <option value="1-3">Rating from 1 to 3</option>
            <option value="1-5">Rating from 1 to 5</option>
         </select>
      </div></>)
   }

   function AnswerTypeJSX({ item }) {
      function Allanswer({ item }) {
         var all = []
         LimitedAnswerdata.filter(e => { return e.questionid == item.id }).map((itemQuestions, index) => {
            all.push(<>
               <div style={{ display: "flex", width: "49%", alignItems: "center", fontSize: 19, justifyContent: "space-between" }} className="mt-3">
                  <span style={{ fontWeight: 700 }}>Answer {index + 1}</span>
                  <input onKeyUp={(e) => { LimitedAnswerdata.filter(e2 => e2.id == itemQuestions.id)[0].answer = e.target.value; startTypingLimitedAnswers(e, itemQuestions) }} type="text" defaultValue={itemQuestions.answer} className="border py-1 px-2" placeholder="Answer" style={{ width: "69%" }} />
                  <button onClick={(e) => { DeleteLimitedAnswer(e, itemQuestions) }} orderid={index} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center hover:bg-white">
                     <TrashIcon className="w-5 h-5" />
                  </button>
               </div>
            </>);
         })

         return all;

      }
      return (<>
         <div className="w-full ml-0" id={`AnswerType${item.id}`}>
            <div>
               <Allanswer item={item} />

               <button onClick={(e) => AddLimitedAnswer(e, item)} className="h-10 mt-3 rounded-md border-solid border bg-gray-100 flex py-2 px-4 items-center text-gray-700 hover:bg-white">
                  <PlusSmIcon className="w-5 h-5 " />
                  <p className="ml-2"> Answer</p>
               </button>
            </div>
         </div>

      </>)
   }
   function QustionsWithType(questionid, itemQuestions, type) {

      var answerplace = document.getElementById(`AnswerType${questionid}`)
      try {
         ReactDOM.unmountComponentAtNode(answerplace)
      } catch (error) {
      }

      sectionsQuestionsdata.filter((e) => { return e.id == questionid })[0].questiontype = type;

      updateQuestionType(questionid, type);
      if (type === "rating") {
         answerplace.style = `width: 47.2%;`;
         answerplace.innerHTML = `
         <select class="h-10 px-1 rounded-md border border-gray-200 outline-none bg-white" style="width: 100%">
         <option value="1-3">Rating from 1 to 3</option>
         <option value="1-5">Rating from 1 to 5</option>
         
      </select>
         `
      } else if (type === "yes/no") {
         try {
            answerplace.innerHTML = ""
         } catch (error) { }

      } else if (type === "limited") {
         try {
            answerplace.className = ""
            answerplace.style = `width: 100%;`;
         } catch (error) { }

         sectionsQuestionsdata.filter((e) => { return e.id == questionid })[0].questiontype2 = ""
         updateQuestionAnswerType(questionid, "")
         ReactDOM.render(
            <AnswerTypeJSX item={itemQuestions} />,
            answerplace
         );
      } else if (type === "open") {
         try {
            answerplace.innerHTML = ""
         } catch (error) { }
      }
   }

   async function deleteSurvey() {
      document.getElementById("surveyDelete").disabled = true;
      document.getElementById("surveyDelete").classList.remove("hover:bg-white");
      document.getElementById("surveyDelete").classList.remove("cursor-pointer");
      var Delete = new Promise(async (resolve, reject) => {
         const textDelete = `DeleteSurvey?idTXT=${encodeURIComponent(params.id)}`;
         await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textDelete}`, {
            "headers": {
               "accept-language": "en-US,en;q=0.9",
               "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
            },
            "body": null,
            "method": "GET"
         }).then(e => {
            resolve(e.json)
         })

      });
      await Delete
      navigate(`/trials/${location.state.trialID}`, { replace: true })
      document.getElementById("surveyDelete").disabled = false;
      document.getElementById("surveyDelete").classList.add("hover:bg-white");
      document.getElementById("surveyDelete").classList.add("cursor-pointer");
   }
   async function removeElementFromArray(all, specificid, seting) {
      seting([])
      var storing = [];
      for (let index = 0; index < all.length; index++) {
         const element = all[index];
         if (index == specificid) {
            continue
         }
         storing.push(element)
      }

      seting(storing)

      console.log("done")
   }
   async function removeElementFromArrayBYID(all, specificid, seting) {
      seting([])
      var storing = [];
      for (let index = 0; index < all.length; index++) {
         const element = all[index];
         if (element.id == specificid) {
            continue
         }
         storing.push(element)
      }

      seting(storing)

      console.log("done")
   }

   async function deleteSection(e) {
      var sectionDeleteBTN = e.currentTarget;
      let sectionid = sectionDeleteBTN.getAttribute("sectionid")
      let sectionindexid = sectionDeleteBTN.getAttribute("sectionindexid")
      sectionDeleteBTN.disabled = true;
      sectionDeleteBTN.classList.remove("hover:bg-white");
      sectionDeleteBTN.classList.remove("cursor-pointer");
      var Delete = new Promise(async (resolve, reject) => {
         const textDelete = `DeleteSection?idTXT=${decodeURIComponent(sectionid)}`;
         await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textDelete}`, {
            "headers": {
               "accept-language": "en-US,en;q=0.9",
               "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
            },
            "body": null,
            "method": "GET"
         }).then(e => {
            resolve(e.json)
         })

      });
      await Delete
      await removeElementFromArray(sectionsdata, sectionindexid, setsectionsdata)
      sectionDeleteBTN.disabled = false;
      sectionDeleteBTN.classList.add("hover:bg-white");
      sectionDeleteBTN.classList.add("cursor-pointer");
   }
   async function deleteQuestion(e) {
      var DeleteQuestionBTN = e.currentTarget;
      DeleteQuestionBTN.disabled = true; DeleteQuestionBTN.classList.remove("hover:bg-white"); DeleteQuestionBTN.classList.remove("cursor-pointer");
      let questionid = DeleteQuestionBTN.getAttribute("questionid")
      var Delete = new Promise(async (resolve, reject) => {
         const textDelete = `DeleteQuestion?idTXT=${encodeURIComponent(questionid)}`;
         await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textDelete}`, {
            "headers": {
               "accept-language": "en-US,en;q=0.9",
               "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
            },
            "body": null,
            "method": "GET"
         }).then(e => {
            resolve(e.json)
         })

      });
      await Delete
      removeElementFromArrayBYID(sectionsQuestionsdata, questionid, setsectionsQuestionsdata)
   }
   async function DeleteLimitedAnswer(e, item) {
      var DeleteBTN = e.currentTarget;
      DeleteBTN.disabled = true; DeleteBTN.classList.remove("hover:bg-white"); DeleteBTN.classList.remove("cursor-pointer");
      let id = item.id
      let orderid = DeleteBTN.getAttribute("orderid")
      var Delete = new Promise(async (resolve, reject) => {
         const textDelete = `DeleteLimitedAnswerByID?idTXT=${encodeURIComponent(id)}`;
         await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textDelete}`, {
            "headers": {
               "accept-language": "en-US,en;q=0.9",
               "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
            },
            "body": null,
            "method": "GET"
         }).then(e => {
            resolve(e.json)
         })

      });
      await Delete
      removeElementFromArrayBYID(LimitedAnswerdata, id, setLimitedAnswerdata)
   }

   async function duplicateQuestion(e, item) {
      var DuplicateBTN = e.currentTarget;
      DuplicateBTN.disabled = true; DuplicateBTN.classList.remove("hover:bg-white"); DuplicateBTN.classList.remove("cursor-pointer");
      let id = item.id
      var Duplicate = new Promise(async (resolve, reject) => {
         const textDelete = `DeleteLimitedAnswerByID?idTXT=${encodeURIComponent(id)}`;
         await fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textDelete}`, {
            "headers": {
               "accept-language": "en-US,en;q=0.9",
               "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
            },
            "body": null,
            "method": "GET"
         }).then(e => {
            resolve(e.json)
         })

      });
      await Duplicate
   }

   useEffect(() => {
      LoadDataTrial();
      LoadSurveyData()
      LoadDataSections();
      LoadDataQuestions()
      LoadDataLimitedAnswers()
   }, [])
   //setup before functions
   var typingTimer;                //timer identifier
   var doneTypingInterval = 1000;  //time in ms, 1 seconds for example

   function startTyping(e) {
      clearTimeout(typingTimer);
      typingTimer = setTimeout(() => doneTypingQuestion(e), doneTypingInterval);
   }


   //user is "finished typing," do something
   function doneTypingQuestion(e) {
      var inputbox = e.target;
      let questionid = inputbox.getAttribute("questionid")
      let questionTXT = inputbox.value;
      const textUpdate = `UpdateQuestion?idTXT=${encodeURIComponent(questionid)}&typeTXT=""&questionTXT=${encodeURIComponent(questionTXT)}&way=question`
      fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textUpdate}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json;
      })
      console.log("changed", e)
   }
   function startTypingLimitedAnswers(e, item) {
      clearTimeout(typingTimer);
      typingTimer = setTimeout(() => doneTypingLimited(e, item), doneTypingInterval);
   }
   function doneTypingLimited(e, item) {
      var inputbox = e.target;
      let answerid = item.id;
      let answerTXT = inputbox.value;
      const textUpdate = `UpdateLimitedQuestion?idTXT=${encodeURIComponent(answerid)}&answerTXT=${encodeURIComponent(answerTXT)}`
      fetch(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/${textUpdate}`, {
         "headers": {
            "accept-language": "en-US,en;q=0.9",
            "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
         },
         "body": null,
         "method": "GET"
      }).then(e => {
         return e.json;
      })

      console.log("changed", e)
   }

   async function loadGraph() {
      for (let index = 0; index < sectionsQuestionsdata.length; index++) {
         const eleQ = sectionsQuestionsdata[index];
         axios
            .post(`https://cors-anyhere.herokuapp.com/https://wavedata.i.tgcloud.io:14240/restpp/query/WaveData/GetSurveyAnswers?questionidTXT=${encodeURIComponent(eleQ.id)}`, {}, {
               headers: {
                  "accept-language": "en-US,en;q=0.9",
                  "Authorization": "Bearer h6t28nnpr3e58pdm1c1miiei4kdcejuv",
               }
            }).then((res) => {
               if (res.status === 200) {
                  var answersids = [];
                  var alldata = [];
                  var allusersData = res.data['results'][1]['USERS'];
                  res.data['results'][0]['SV'].forEach(element => {
                     answersids.push(element['attributes']['answer'])
                     alldata.push(element['attributes'])

                  });
                  console.log(allusersData);
                  var count = 0;
                  var children = [];

                  function GetUsers(answer) {
                     var allusers = [];
                     var usercount = 0;
                     alldata.forEach(element => {
                        if (element['answer'] == answer) {
                           var userdata = allusersData.filter(e => e.userid == element['userid'])[0];
                           allusers.push({
                              "children": [],
                              "email": userdata['email'],
                              "id": `${userdata['username']}${usercount.toString()}`,
                              "name": userdata['username'],
                              "style": {
                                 "fill": "#c99cdf",
                                 "stroke": "#A800FB"
                              }

                           })
                        }
                     })
                     return allusers;
                  }

                  answersids.forEach(element => {
                     children.push({
                        "children": GetUsers(element),
                        "id": "answer " + count.toString(),
                        "name": `Answer ${element}`,
                        "style": {
                           "fill": "#d28b69",
                           "stroke": "#F9641D"
                        }
                     })
                     count++;
                  })
                  var result = {
                     "name": "question",
                     "id": "question",
                     "children": children,
                     "style": {
                        "fill": "#FFD8D9",
                        "stroke": "#FF6D67",
                     }
                  }

                  Thisstate.data = result;
                  const container = document.getElementById(`container${index}`);
                  const width = 400;
                  const height = 400;
                  container.innerHTML = "";
                  const graph = new G6.TreeGraph({
                     container: `container${index}`,
                     width,
                     height,
                     modes: {
                        default: [
                           {
                              type: 'collapse-expand',
                              onChange: function onChange(item, collapsed) {
                                 const data = item.get('model');
                                 data.collapsed = collapsed;
                                 return true;
                              },
                           },
                           'drag-canvas',
                           'zoom-canvas',
                           'drag-node',
                           'activate-relations',
                        ],
                     },
                     defaultNode: {
                        size: 55,
                     },
                     layout: {
                        type: 'dendrogram',
                        direction: 'RL',
                        nodeSep: 10,
                        rankSep: 200,
                        radial: true,
                     },
                  });
                  graph.node(function (node) {
                     console.log("here=>", node);
                     return {
                        label: `${node['name']}`
                     };
                  });

                  graph.edge(function (node) {
                     return {
                        label: `${node.id}`,
                     };
                  });

                  graph.data(Thisstate.data);

                  graph.render();
                  graph.fitView();
                  graph.get('canvas').set('localRefresh', false);
                  graph.on('node:click', (evt) => {
                     const nodeItem = evt.item;
                     if (!nodeItem) return;
                     const item = nodeItem.getModel();
                     if (item.url) {
                        window.open(item.url);
                     }
                  });
                  if (typeof window !== 'undefined')
                     window.onresize = () => {
                        if (!graph || graph.get('destroyed')) return;
                        if (
                           !container ||
                           !container.scrollWidth ||
                           !container.scrollHeight
                        )
                           return;
                        graph.changeSize(container.scrollWidth, container.scrollHeight);
                     };
               }
            })
            .catch((err) => {
               console.error(err);
            });
      }

   }
   useEffect(() => {
      loadGraph();
   }, [tabIndex])
   return (
      <>
         <div className="bg-white border border-gray-400 rounded-lg py-4 px-6 flex mb-2 items-center">
            <div onClick={() => navigate(-2)} className="flex items-center hover:cursor-pointer hover:underline decoration-gray-400">
               <p className="text-gray-400">Trials</p>
               <ChevronRightIcon className="mx-1 w-5 h-5 text-gray-400" />
            </div>
            <div onClick={() => navigate(-1)} className="flex items-center hover:cursor-pointer hover:underline decoration-gray-400">
               <p className="text-gray-400">{TRIAL_DATA?.title}</p>
               <ChevronRightIcon className="mx-1 w-5 h-5 text-gray-400" />
            </div>
            <div className="flex items-center">
               <p className="text-gray-400">{SURVEY_DATA?.name}</p>
            </div>
         </div>
         <div className={`bg-white border border-gray-400 rounded-lg overflow-hidden mb-2`}>
            <div className="flex p-6">
               <img src={SURVEY_DATA?.image} alt="Survey" className="w-[128px] h-[128px] object-cover" />
               <div className="mx-8 flex-1">
                  <p className="text-3xl font-semibold">{SURVEY_DATA?.name}</p>
                  <p className="mt-6">{SURVEY_DATA?.description}</p>
               </div>
               <div className="flex">
                  <button onClick={() => { setModalShow(true) }} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center hover:bg-white">
                     <PencilIcon className="w-5 h-5 text-gray-400" />
                  </button>
                  <button id="surveyDelete" onClick={deleteSurvey} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center mx-1 hover:bg-white">
                     <TrashIcon className="w-5 h-5 text-gray-400" />
                  </button>
                  <button onClick={addSection} className="h-10 rounded-md shadow-md bg-black text-white flex py-2 px-4 items-center hover:bg-gray-700 hover:text-gray-500">
                     <PlusSmIcon className="w-5 h-5 " />
                     <p className=" ml-2">Section</p>
                  </button>
               </div>
            </div>
         </div>
         <div className="bg-white border border-gray-400 rounded-lg flex mt-4 px-4">
            {TABS.map(({ id, title }, index) => {
               const IS_LAST = index === TABS.length - 1;
               const ACTIVE = index === tabIndex;

               return (
                  <>
                     <div className="self-stretch w-[1px] bg-gray-400" />
                     <button key={id} onClick={() => setTabIndex(index)} className={`flex items-center h-14 p-4 ${ACTIVE ? 'bg-gray-100' : 'bg-white'}`}>
                        <p className={`${ACTIVE ? 'text-orange-500' : 'text-black'} font-medium`}>{title}</p>
                     </button>
                     {IS_LAST && <div className="self-stretch w-[1px] bg-gray-400" />}
                  </>
               );
            })}
         </div>
         {tabIndex === 0 && (
            <>
               {sectionsdata.map((item, index) => {
                  const sectindex = item.id;
                  return (
                     <div for={sectindex} className="bg-white border border-gray-400 rounded-lg flex flex-col mt-4 overflow-hidden">
                        <div className="bg-gray-100 py-4 px-6 border-b border-b-gray-400">
                           <div className="flex mb-4 items-center">
                              <p className="text-2xl font-semibold flex-1">{`Section ${index + 1}`}</p>
                              <button id={`Trash-sectionid-${sectindex}`} sectionid={sectindex} sectionindexid={index} onClick={(e) => { deleteSection(e) }} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center hover:bg-white">
                                 <TrashIcon className="w-5 h-5 text-gray-400" />
                              </button>
                              <button className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center ml-1">
                                 <DocumentDuplicateIcon className="w-5 h-5 text-gray-400" />
                              </button>
                           </div>
                           <label for={`category-select${sectindex}`} className="font-semibold mr-4">Category:</label>
                           <Select
                              className=" rounded-md  outline-none w-1/3"
                              name={`category${sectindex}`}
                              id={`category-select${sectindex}`}
                              placeholder="Select Category"
                              onChange={(e) => { sectionsdata[index].category = e.value; updateSections() }}
                              options={dataCategory}
                              defaultValue={dataCategory.filter(edata => edata.value == (item.category))[0]}
                              getOptionLabel={e => (
                                 <div style={{ display: 'flex', alignItems: 'center' }}>
                                    {e.icon}
                                    <span style={{ marginLeft: 5 }}>{e.text}</span>
                                 </div>
                              )}
                           />

                        </div>
                        {sectionsQuestionsdata.filter(e => { return e.sectionid == sectindex }).map((itemQuestions, index) => {
                           return (
                              <div className="border-b border-b-gray-400 p-4">
                                 <div className="flex mb-2 items-center">
                                    <p className="text-2xl font-semibold flex-1">{`Question ${index + 1}`}</p>
                                    <button questionid={itemQuestions.id} questionidOrder={index} onClick={(e) => { deleteQuestion(e) }} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center hover:bg-white">
                                       <TrashIcon className="w-5 h-5 text-gray-400" />
                                    </button>
                                    <button onClick={(e) => { duplicateQuestion(e, itemQuestions) }} className="flex w-[52px] h-10 border border-gray-400 bg-gray-200 rounded-md justify-center items-center ml-1">
                                       <DocumentDuplicateIcon className="w-5 h-5 text-gray-400" />
                                    </button>
                                 </div>
                                 <input type="text" onKeyDown={(e) => { sectionsQuestionsdata.filter(e2 => { return e2.id == itemQuestions.id })[0].question = e.target.value; startTyping(e) }} defaultValue={itemQuestions.question} questionid={itemQuestions.id} className="border py-1 px-2 w-full" placeholder="What is your question?" />

                                 <div className="flex flex-wrap mt-2">
                                    <select name={`questiontype${index}`} defaultValue={itemQuestions.questiontype} onChange={(e) => { QustionsWithType(itemQuestions.id, itemQuestions, e.target.value) }} sectionid={sectindex} questionid={itemQuestions.id} id={`questiontype${index}`} className="h-10 px-1 rounded-md border border-gray-200 outline-none " style={{ width: "49%", "fontFamily": "FontAwesome" }}>
                                       <option value="rating" className="fa-solid"> &#xf118; Rating question</option>
                                       <option value="yes/no">&#xf058; Yes/no question</option>
                                       <option value="limited">&#xf0c9; Limited question</option>
                                       <option value="open">&#xf059; Open question</option>
                                    </select>

                                    {(itemQuestions.questiontype === "rating") && (
                                       <RatingAnswer item={itemQuestions} />
                                    )}
                                    {(itemQuestions.questiontype === "limited") && (
                                       <AnswerTypeJSX item={itemQuestions} />
                                    )}

                                 </div>
                              </div>
                           );
                        })}
                        <div className="p-4">
                           <button sectionsid={sectindex} onClick={(e) => addQuestion(e)} className="h-10 rounded-md shadow-md bg-black text-white flex py-2 px-4 items-center hover:bg-gray-700 hover:text-gray-500">
                              <PlusSmIcon className="w-5 h-5" />
                              <p className=" ml-2">Question</p>
                           </button>
                        </div>
                     </div>
                  );
               })}
            </>
         )}
         {tabIndex === 1 && (
            <>
               {sectionsdata.map((item, index) => {

                  return (
                     <div className="bg-white border border-gray-400 rounded-lg flex flex-col mt-4 overflow-hidden">
                        <div className="bg-gray-100 py-4 px-6 border-b border-b-gray-400">
                           <div className="flex mb-4 items-center">
                              <p className="text-2xl font-semibold flex-1">{`Section ${index + 1}: ${item.category}`}</p>
                           </div>
                        </div>
                        {sectionsQuestionsdata.filter(eq => eq.sectionid == item.id).map((item, index) => {
                           return (
                              <div className="border-b border-b-gray-400 p-4">
                                 <p className="text-xl font-semibold">{`Question ${index + 1}: ${item.question}`}</p>
                                 <div id={`container${index}`}></div>
                              </div>
                           );
                        })}
                     </div>
                  );
               })}
            </>
         )}
         <UpdateSurveyModal
            show={UpdatemodalShow}
            onHide={() => {
               setModalShow(false);
               LoadSurveyData()
            }}
            id={(params.id)}
         />
      </>
   );
}

export default SurveyDetails;
